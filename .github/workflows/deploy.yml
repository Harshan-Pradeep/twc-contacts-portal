name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  DO_HOST: ${{ secrets.DO_HOST }}
  DO_USERNAME: ${{ secrets.DO_USERNAME }}
  DO_PASSWORD: ${{ secrets.DO_PASSWORD }}
  MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
  GOOGLE_CALLBACK_URL: ${{ secrets.GOOGLE_CALLBACK_URL }}
  DEMO_USER_PASSWORD: ${{ secrets.DEMO_USER_PASSWORD }}
  DEMO_USER_EMAIL: ${{ vars.DEMO_USER_EMAIL }}
  FRONTEND_URL: ${{ vars.FRONTEND_URL }}
  NODE_ENV: production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Create API .env file
        run: |
          cat << EOF > ./api/.env
          NODE_ENV=production
          PORT=3003
          MYSQL_HOST=database
          MYSQL_PORT=3306
          MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL=${{ secrets.GOOGLE_CALLBACK_URL }}
          DEMO_USER_PASSWORD=${{ secrets.DEMO_USER_PASSWORD }}
          DEMO_USER_EMAIL=${{ vars.DEMO_USER_EMAIL }}
          FRONTEND_URL=${{ vars.FRONTEND_URL }}
          EOF

      - name: Create frontend .env file
        run: |
          cat << EOF > ./web/.env
          VITE_BASE_URL=http://api:3003
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push API image
        uses: docker/build-push-action@v3
        with:
          context: ./api
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/twc-contacts-portal-api:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/twc-contacts-portal-api:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/twc-contacts-portal-api:buildcache,mode=max

      - name: Build and push Web image
        uses: docker/build-push-action@v3
        with:
          context: ./web
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/twc-contacts-portal-web:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/twc-contacts-portal-web:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/twc-contacts-portal-web:buildcache,mode=max

      - name: Create deployment directory
        run: |
          mkdir -p deployment
          cp docker-compose.yml deployment/

      - name: Update docker-compose.yml for production
        run: |
          sed -i 's|build:|image: ${{ secrets.DOCKER_HUB_USERNAME }}/twc-contacts-portal-api:latest|' deployment/docker-compose.yml
          sed -i 's|context: ./api||' deployment/docker-compose.yml
          sed -i 's|dockerfile: Dockerfile||' deployment/docker-compose.yml
          sed -i 's|build:|image: ${{ secrets.DOCKER_HUB_USERNAME }}/twc-contacts-portal-web:latest|' deployment/docker-compose.yml
          sed -i 's|context: ./web||' deployment/docker-compose.yml
          sed -i 's|dockerfile: Dockerfile||' deployment/docker-compose.yml
          sed -i 's|http://localhost:3003|http://api:3003|g' deployment/docker-compose.yml
          sed -i 's|http://localhost:5173|${{ vars.FRONTEND_URL }}|g' deployment/docker-compose.yml

      - name: Copy files to DigitalOcean
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          password: ${{ secrets.DO_PASSWORD }}
          source: "deployment/*"
          target: "/root/twc-contacts-portal"
          strip_components: 1

      - name: Configure server and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          password: ${{ secrets.DO_PASSWORD }}
          script: |
            # Configure basic firewall
            apt-get update
            apt-get install -y ufw
            
            # Configure firewall rules
            ufw allow 22/tcp
            ufw allow 80/tcp
            ufw allow 3003/tcp
            ufw --force enable

            # Deploy application
            cd /root/twc-contacts-portal
            docker-compose pull
            docker-compose down
            docker-compose up -d